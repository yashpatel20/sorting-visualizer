{"version":3,"sources":["SortingAlgorithms/getMergeSortAnimations.js","SortingAlgorithms/getQuickSortAnimations.js","SortingAlgorithms/getHeapSortAnimations.js","SortingVisualizer.js","SortingAlgorithms/getRadixSortAnimations.js","SortingAlgorithms/getBubbleSortAnimations.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","quickSort","left","right","pivot_idx","random","new_pivot_idx","partition","pivot_Val","swap","arr","a","b","temp","getHeapSortAnimations","sizeHeap","n","siftDown","buildMaxHeap","heapSize","largest","NUMBER_OF_ARRAY_BARS","getMax","m","countSort","exp","count","Array","fill","output","getRadixSortAnimations","ANIMATION_SPEED_MS","window","screen","width","resetArray","len","min","max","randomArr","SortingVisualizer","useState","setArr","useEffect","height","numWidth","console","log","numMargin","margin","arrVal","map","value","idx","style","marginLeft","marginRigh","className","key","Button","variant","size","color","onClick","location","reload","swapped","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","backgroundColor","bar","newHeight","getQuickSortAnimations","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7515b2e3.chunk.js","sourcesContent":["export default function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","let animations = []\n\nexport default function getQuickSortAnimations(arr){\n    let array = [...arr]\n    quickSort(array, 0, array.length-1,animations)\n    console.log(animations)\n    return animations\n}\n\nlet quickSort = (array, left, right)=>{\n    if(left < right){\n        let pivot_idx = Math.floor( Math.random()*(right-left+1)+left )\n        let new_pivot_idx = partition(left, right, array, pivot_idx,animations)\n        quickSort(array, left, new_pivot_idx-1)\n        quickSort(array, new_pivot_idx+1, right)\n    }\n    return array\n}\n\nlet partition = (left, right, array, pivot_idx)=>{\n    let pivot_Val = array[pivot_idx]\n    //swap randomized pivot and right\n    animations.push([pivot_idx,right,true])\n    animations.push([pivot_idx,right,false])\n    animations.push([pivot_idx,array[right],right,array[pivot_idx]])\n    swap(array,pivot_idx,right)\n    let new_pivot_idx = left\n    for(let i=left; i<right; i++){\n        //comparing\n        animations.push([i,right,true])\n        animations.push([i,right,false])\n        if(array[i] < pivot_Val){ \n            //swap animation\n            animations.push([i,array[new_pivot_idx],new_pivot_idx,array[i]])\n            swap(array,i,new_pivot_idx++)\n        }else animations.push([i,array[i],new_pivot_idx,array[new_pivot_idx]])\n    }\n    animations.push([new_pivot_idx,array[right],right, array[new_pivot_idx]])\n    swap(array,new_pivot_idx,right)\n    return new_pivot_idx\n}\n\nlet swap = (arr, a, b) => {\n    let temp = arr[a]\n    arr[a] = arr[b]\n    arr[b] = temp\n}\n\n\n","let animations = []\n\n//heap parent = (i-1)/2 left = 2*i+1 right = 2*i+2\n//first build a max heap \n//build a max heap and swap max value with last val then repeat\n//do a sift down operations n-1 times , decrease the size of the array by 1 everytime\n\nexport default function getHeapSortAnimations(array){\n    buildMaxHeap(array)\n    let heapSize = array.length\n    for(let i = array.length-1;i>0;i--){\n        animations.push([0,array[i],i,array[0]])\n        swap(array,i,0)\n        heapSize--\n        siftDown(array,0,heapSize)\n    }\n    return animations\n}\n\n//Binary heap is a complete binary tree with N nodes\n//child nodes are the base case as sift down is used\n//so run sift down for n/2 to 1 nodes\nfunction buildMaxHeap(array){\n    let sizeHeap = array.length\n    for(let n = (array.length-2)/2 ; n>=0; n--){\n        siftDown(array,n,sizeHeap)\n    }\n}\n\nfunction siftDown(array, i, heapSize){\n    let left = 2*i+1, right = 2*i+2\n    let largest = i\n    if(left < heapSize && array[left] > array[largest]) largest = left\n    if(right < heapSize && array[right] > array[largest]) largest = right\n    \n    if(largest!==i){\n        animations.push([i,largest,true])\n        animations.push([i,largest,false])\n        animations.push([i,array[largest],largest,array[i]])\n        swap(array, largest, i)\n        siftDown(array, largest,heapSize)\n    }\n}\n\nlet swap = (arr, a, b) => {\n    let temp = arr[a]\n    arr[a] = arr[b]\n    arr[b] = temp\n}\n\n\n\n\n\n\n\n","import React, { useState, useEffect } from \"react\";\nimport \"./SortingVisualizer.css\";\nimport getMergeSortAnimations from \"./SortingAlgorithms/getMergeSortAnimations\";\nimport getBubbleSortAnimations from \"./SortingAlgorithms/getBubbleSortAnimations\";\nimport getQuickSortAnimations from \"./SortingAlgorithms/getQuickSortAnimations\";\nimport getHeapSortAnimations from \"./SortingAlgorithms/getHeapSortAnimations\";\nimport getRadixSortAnimations from \"./SortingAlgorithms/getRadixSortAnimations\";\nimport getBogoSortAnimations from \"./SortingAlgorithms/getBogoSortAnimations\";\nimport Button from \"@material-ui/core/Button\";\n\n// Change this value for the speed of the animations.\nlet ANIMATION_SPEED_MS = 2;\n\n// Change this value for the number of bars (value) in the array.\nlet NUMBER_OF_ARRAY_BARS;\nif (window.screen.width < 400) {\n  NUMBER_OF_ARRAY_BARS = 30;\n  ANIMATION_SPEED_MS = 10;\n} else NUMBER_OF_ARRAY_BARS = window.screen.width / 3.5;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = \"turquoise\";\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = \"red\";\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction resetArray(len) {\n  const randomArr = [];\n  for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n    randomArr.push(randomIntFromInterval(5, len));\n  }\n  return randomArr;\n}\n\nfunction SortingVisualizer() {\n  const [arr, setArr] = useState([]);\n  useEffect(() => {\n    let len = window.screen.height / 1.4;\n    const randomArr = resetArray(len);\n    setArr(randomArr);\n  }, []);\n\n  //sorting algoirthms\n  const bubbleSort = () => {\n    const animations = getBubbleSortAnimations(arr);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 == 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const bar = animations[i];\n          const barOneStyle = arrayBars[bar[0]].style;\n          const barTwoStyle = arrayBars[bar[2]].style;\n          barOneStyle.height = `${bar[1]}px`;\n          barTwoStyle.height = `${bar[3]}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  };\n\n  const mergeSort = () => {\n    const animations = getMergeSortAnimations(arr);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  };\n\n  const quickSort = () => {\n    const animations = getQuickSortAnimations(arr);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = animations[i].length === 3;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = animations[i][2] ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const bar = animations[i];\n          const barOneStyle = arrayBars[bar[0]].style;\n          const barTwoStyle = arrayBars[bar[2]].style;\n          barOneStyle.height = `${bar[1]}px`;\n          barTwoStyle.height = `${bar[3]}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  };\n\n  const heapSort = () => {\n    const animations = getHeapSortAnimations(arr);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = animations[i].length === 3;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = animations[i][2] ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const bar = animations[i];\n          const barOneStyle = arrayBars[bar[0]].style;\n          const barTwoStyle = arrayBars[bar[2]].style;\n          barOneStyle.height = `${bar[1]}px`;\n          barTwoStyle.height = `${bar[3]}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  };\n\n  const radixSort = () => {\n    const animations = getRadixSortAnimations(arr);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (animations[i].length === 2) {\n        const barOneIdx = animations[i][0];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const color = animations[i][1] ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const barOneIdx = animations[i][0];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${animations[i][1]}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  };\n\n  const bogoSort = () => {\n    getBogoSortAnimations(arr);\n  };\n\n  const numWidth = Math.floor(window.screen.width / (arr.length * 3));\n  console.log(\"width: \" + window.screen.width);\n  console.log(\"width: \" + window.screen.height);\n  const width = `${numWidth}px`;\n  const numMargin =\n    arr.length < 5\n      ? 10\n      : arr.length < 8\n      ? 8\n      : arr.length < 11\n      ? 6\n      : arr.length < 20\n      ? 4\n      : arr.length < 50\n      ? 3.5\n      : arr.length < 100\n      ? 3\n      : arr.length < 130\n      ? 2.5\n      : 2;\n  const margin = `${numMargin}px`;\n\n  const arrVal = arr.map((value, idx) => (\n    <div\n      style={{\n        height: `${value}px`,\n        width: width,\n        marginLeft: margin,\n        marginRigh: margin\n      }}\n      className=\"array-bar\"\n      key={idx}\n    ></div>\n  ));\n  return (\n    <div>\n      <div className=\"array-container\">{arrVal}</div>\n      <div className=\"buttons\">\n        <span className=\"generateArray\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color=\"secondary\"\n            onClick={() => {\n              const randomArr = resetArray();\n              setArr(randomArr);\n              window.location.reload();\n            }}\n          >\n            Generate New Array\n          </Button>\n        </span>\n        <span className=\"sort\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color=\"primary\"\n            className=\"sort\"\n            onClick={bubbleSort}\n          >\n            Bubble Sort\n          </Button>\n        </span>\n        <span className=\"sort\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color=\"primary\"\n            className=\"sort\"\n            onClick={mergeSort}\n          >\n            Merge Sort\n          </Button>\n        </span>\n        <span className=\"sort\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color=\"primary\"\n            className=\"sort\"\n            onClick={quickSort}\n          >\n            Quick Sort\n          </Button>\n        </span>\n        <span className=\"sort\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color=\"primary\"\n            className=\"sort\"\n            onClick={heapSort}\n          >\n            Heap Sort\n          </Button>\n        </span>\n        <span className=\"sort\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color=\"primary\"\n            className=\"sort\"\n            onClick={radixSort}\n          >\n            Radix Sort\n          </Button>\n        </span>\n        {/* <span className=\"sort\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color=\"primary\"\n            className=\"sort\"\n            onClick={bogoSort}\n          >\n            Bogo Sort\n          </Button>\n        </span> */}\n      </div>\n    </div>\n  );\n}\n\nexport default SortingVisualizer;\n","let animations = [];\n\nconst getRadixSortAnimations = arr => {\n  const m = getMax(arr);\n  //run countsort for all places (units , tens , hundreds ...)\n  for (let exp = 1; Math.floor(m / exp) > 0; exp *= 10)\n    countSort(arr, arr.length, exp);\n  return animations;\n};\n\n//Max val in the array\nconst getMax = arr => {\n  let m = arr[0];\n  for (let i = 1; i < arr.length; i++) if (arr[i] > m) m = arr[i];\n  return m;\n};\n\nconst countSort = (arr, n, exp) => {\n  let count = Array(10).fill(0);\n  let output = Array(n).fill(0);\n  //fill the count array\n  for (let i = 0; i < n; i++) {\n    //run over the whole array\n    animations.push([i, true]);\n    animations.push([i, false]);\n    count[Math.floor(arr[i] / exp) % 10]++;\n  }\n  //Get the proper indices in the count array\n  for (let i = 1; i < 10; i++) count[i] += count[i - 1];\n  //Fill the output array with the index from count for every val\n  for (let i = n - 1; i >= 0; i--) {\n    animations.push([count[Math.floor(arr[i] / exp) % 10] - 1, arr[i], \"hmm\"]);\n    output[count[Math.floor(arr[i] / exp) % 10] - 1] = arr[i];\n    count[Math.floor(arr[i] / exp) % 10]--;\n  }\n  //Finally fill the arr\n  for (let i = 0; i < n; i++) {\n    arr[i] = output[i];\n  }\n};\n\nexport default getRadixSortAnimations;\n","export default function getBubbleSortAnimations(arr){\n    //O(n*n) comparision based sorting algorithm\n    const array = [...arr]\n    const animations = [];\n    for(let i=0;i<array.length-1;i++){\n        let swapped = false;\n        for(let j=0;j<array.length-i-1;j++){\n            //two values that are being compared\n            animations.push([j,j+1]);\n            //change color from secondary to orignal\n            animations.push([j,j+1]);\n            if(array[j] > array[j+1]){\n                animations.push([j,array[j+1],j+1,array[j]]);\n                [array[j],array[j+1]] = [array[j+1],array[j]]\n                swapped = true\n            }else animations.push([j,array[j],j+1,array[j+1]]);\n        }\n        if(swapped === false) break;\n    }\n    return animations\n}\n\n","import React from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Sorting Visualizer</h1>\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}